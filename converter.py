# -*- coding: utf-8 -*-
"""3rdYearHAR.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1PFTmKTMhj1lRhzKGSNkppmx8VNuL1LoO

# Imports, Data Handling
"""

import numpy as np
import pandas as pd
import os
from joblib import Parallel, delayed
import random
#FIX THIS TO WORK FOR the high frequency case.
#Load Data, uncomment when you need to load a dataset. This chunk is for the realized volatility dataset
years=list(range(1996,2025))#1996-2025
data=pd.DataFrame()
for i in years:
    s="/users/l/p/lpage2/"+str(i)+"SPYTAQ.csv"
    temp=pd.read_csv(s)
    if i<=2008:
        temp=temp.drop(columns=['SYMBOL'], axis=1)
    else:
        temp=temp.drop(columns=['SYM_ROOT','SYM_SUFFIX'],axis=1)
        temp=temp.rename(columns={'TIME_M':'TIME'})
    data=pd.concat([data,temp], ignore_index=True)
data=data.to_numpy()
#Going to pretend that trading only happens between 9:30am and 4pm. THis gives us 78 time periods. Can adjust if babii wants it. Finding prices here
times=["09:30","09:35","09:40","09:45","09:50","09:55"]
for i in range(10,16):
    for j in range(0,60,5):
        if j<10:
            times.append(str(i)+":0"+str(j))
        else:
            times.append(str(i)+":"+str(j))
times.append("16:00")
starttime="09:30"
endtime="16:00"
def pricegen(currenttime,prevtime,currentdate,prevdate,currentprice,prevprice,times,starttime,endtime): 
    if currenttime[1]==':': #Handling leading zero problems
        currenttime="0"+currenttime
    if prevtime[1]==':':
        prevtime="0"+prevtime
    if prevdate!=currentdate:
        currentdate=currentdate+" 09:30"
        return (currentdate,currentprice)
    if currenttime<starttime or prevtime>endtime:
        #Not open hours
        return
    if prevtime<starttime:
        #Opening Clause
        currentdate=currentdate+" 09:30"
        return (currentdate,currentprice)
    if currenttime>endtime:
        #Ending Clause 
        currentdate=prevdate+" 16:00"
        return (currentdate,prevprice)
    for j in range(len(times)):
        if prevtime<times[j] and currenttime>times[j]:
            currentdate=currentdate+" "+times[j]
            return (currentdate, 0.5*(currentprice+prevprice))

saves=Parallel(n_jobs=-1,return_as='list')(delayed(pricegen) (data[i,1],data[i-1,1],data[i,0],data[i-1,0],data[i,2],data[i-1,2],times,starttime,endtime) for i in range(1,data.shape[0]))
saves.insert(0, (data[0,0]+" 09:30", data[0,2]))
saves=[x for x in saves if x is not None]
with open('/work/users/l/p/lpage2/data.csv', 'a') as fp:
    fp.write('\n'.join('{},{}'.format(x[0],x[1]) for x in saves))
